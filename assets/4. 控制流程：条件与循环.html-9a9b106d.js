import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e}from"./app-89859c14.js";const t={},p=e(`<h1 id="_4-控制流程-条件与循环" tabindex="-1"><a class="header-anchor" href="#_4-控制流程-条件与循环" aria-hidden="true">#</a> 4. 控制流程：条件与循环</h1><p>在编程中，控制流程是指根据不同条件执行不同的代码段或者重复执行一段代码的机制。这是让计算机执行我们想要的操作的关键部分。</p><h2 id="条件语句-if、elif、else" tabindex="-1"><a class="header-anchor" href="#条件语句-if、elif、else" aria-hidden="true">#</a> 条件语句：if、elif、else</h2><p>条件语句允许我们根据不同的条件执行不同的代码块。比如，如果某个条件为真，我们执行一组指令；如果为假，我们执行另一组指令。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 示例</span>
age <span class="token operator">=</span> <span class="token number">20</span>

<span class="token keyword">if</span> age <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;你还未成年，不能投票&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">elif</span> age <span class="token operator">==</span> <span class="token number">18</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;你刚刚成年，可以开始投票了&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;你已经成年，可以参与投票&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码中，首先定义了一个变量<code>age</code>，然后根据<code>age</code>的值不同，输出不同的信息。</p><h2 id="循环-for、while" tabindex="-1"><a class="header-anchor" href="#循环-for、while" aria-hidden="true">#</a> 循环：for、while</h2><p>循环是一种重复执行相同代码块的结构。Python 提供了两种主要的循环结构：<code>for</code>循环和<code>while</code>循环。</p><h3 id="for-循环" tabindex="-1"><a class="header-anchor" href="#for-循环" aria-hidden="true">#</a> for 循环</h3><p><code>for</code>循环用于对序列（如列表、元组等）中的每个元素执行相同的操作。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 示例</span>
fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;苹果&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;香蕉&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;橙子&quot;</span><span class="token punctuation">]</span>

<span class="token keyword">for</span> fruit <span class="token keyword">in</span> fruits<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;我喜欢吃</span><span class="token interpolation"><span class="token punctuation">{</span>fruit<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码将遍历列表<code>fruits</code>中的每个元素，并输出一句话。</p><h3 id="while-循环" tabindex="-1"><a class="header-anchor" href="#while-循环" aria-hidden="true">#</a> while 循环</h3><p><code>while</code>循环用于在条件为真的情况下重复执行一段代码。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 示例</span>
count <span class="token operator">=</span> <span class="token number">0</span>

<span class="token keyword">while</span> count <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;当前计数：</span><span class="token interpolation"><span class="token punctuation">{</span>count<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    count <span class="token operator">+=</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码将输出从 0 到 4 的数字。</p><h2 id="for-和-while-的区别以及适用场景" tabindex="-1"><a class="header-anchor" href="#for-和-while-的区别以及适用场景" aria-hidden="true">#</a> for 和 while 的区别以及适用场景</h2><ul><li><code>for</code>循环是在已知循环次数的情况下使用的。比如遍历一个列表、元组等，或者执行固定次数的操作。</li><li><code>while</code>循环则是在条件为真时一直执行，直到条件为假时才停止。通常用于不确定循环次数的情况，比如当用户输入特定命令才停止。</li></ul><h2 id="实战例子-猜数字游戏" tabindex="-1"><a class="header-anchor" href="#实战例子-猜数字游戏" aria-hidden="true">#</a> 实战例子：猜数字游戏</h2><p>现在，让我们结合上面学到的知识来写一个简单的猜数字游戏吧：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> random

number_to_guess <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>

<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    user_guess <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;猜一猜数字是多少（1-100）：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">if</span> user_guess <span class="token operator">&lt;</span> number_to_guess<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;猜小了，再试试。&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">elif</span> user_guess <span class="token operator">&gt;</span> number_to_guess<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;猜大了，再试试。&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;恭喜你，猜对了！答案是</span><span class="token interpolation"><span class="token punctuation">{</span>number_to_guess<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        <span class="token keyword">break</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个游戏会随机生成一个 1 到 100 之间的数字，你需要一直猜，直到猜中为止。这个例子结合了条件语句和循环，巩固了我们刚刚学到的知识。</p><p>希望这个例子能帮助你更好地理解 Python 中的控制流程！</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>通过学习条件与循环，我们可以根据不同的情况执行不同的代码，或者重复执行一段代码直到满足某个条件。这是编程中非常重要的基础，也是我们日常生活中经常会用到的概念。</p><p>希望你现在对 Python 的控制流程有了更清晰的认识！继续加油，下一篇文章我们将探讨函数的概念。</p>`,26),o=[p];function i(c,l){return s(),a("div",null,o)}const d=n(t,[["render",i],["__file","4. 控制流程：条件与循环.html.vue"]]);export{d as default};
