import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as l,c as i,a as n,b as o,d as s,e}from"./app-3caab8af.js";const d={},h=n("h1",{id:"_2-python-的安装与环境配置",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-python-的安装与环境配置","aria-hidden":"true"},"#"),o(" 2.Python 的安装与环境配置")],-1),c=n("h2",{id:"在-windows-上安装-python",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#在-windows-上安装-python","aria-hidden":"true"},"#"),o(" 在 Windows 上安装 Python")],-1),p=n("strong",null,"下载 Python 安装程序",-1),u=n("br",null,null,-1),y={href:"https://www.python.org/",target:"_blank",rel:"noopener noreferrer"},g=n("br",null,null,-1),_=n("img",{src:"https://www.python.org/static/community_logos/python-logo-master-v3-TM.png",alt:"Python下载页面",loading:"lazy"},null,-1),m=e(`<li><p><strong>选择操作系统对应的安装程序</strong><br> 选择 Windows Installer（msi）版本。</p></li><li><p><strong>运行安装程序</strong><br> 运行下载好的安装程序。在安装过程中，记得勾选“Add Python X.X to PATH”选项（X.X 代表你安装的 Python 版本号），这样可以使得 Python 在命令行中可用，方便后续使用。<br><img src="https://docs.python.org/3/_images/win_installer.png" alt="Python安装选项" loading="lazy"></p></li><li><p><strong>安装完成</strong><br> 安装过程通常会很快，一旦完成，你可以在命令行中输入以下命令验证 Python 是否成功安装：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>python <span class="token operator">-</span><span class="token operator">-</span>version
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果显示正确的 Python 版本号，说明安装成功。</p></li>`,3),v=n("h2",{id:"在-macos-上安装-python",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#在-macos-上安装-python","aria-hidden":"true"},"#"),o(" 在 macOS 上安装 Python")],-1),b=n("strong",null,"下载 Python 安装程序",-1),P=n("br",null,null,-1),f={href:"https://www.python.org/",target:"_blank",rel:"noopener noreferrer"},w=n("br",null,null,-1),x=n("img",{src:"https://www.python.org/static/community_logos/python-logo-master-v3-TM.png",alt:"Python下载页面",loading:"lazy"},null,-1),k=e(`<li><p><strong>选择操作系统对应的安装程序</strong><br> 选择 macOS Installer（pkg）版本。</p></li><li><p><strong>运行安装程序</strong><br> 运行下载好的安装程序，按照提示进行安装。</p></li><li><p><strong>安装完成</strong><br> 安装过程通常会很快，一旦完成，你可以在终端中输入以下命令验证 Python 是否成功安装：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>python3 <span class="token operator">-</span><span class="token operator">-</span>version
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果显示正确的 Python 版本号，说明安装成功。</p></li>`,3),S=e('<h2 id="配置开发环境" tabindex="-1"><a class="header-anchor" href="#配置开发环境" aria-hidden="true">#</a> 配置开发环境</h2><h3 id="文本编辑器或集成开发环境-ide" tabindex="-1"><a class="header-anchor" href="#文本编辑器或集成开发环境-ide" aria-hidden="true">#</a> 文本编辑器或集成开发环境（IDE）</h3><p>你可以选择一个适合你的文本编辑器或者集成开发环境（IDE）来编写 Python 代码。一些常用的 Python IDE 包括：</p><ul><li><strong>VSCode</strong> ：Visual Studio Code 是一个强大的开源代码编辑器，支持多种编程语言，对 Python 的支持非常好。</li><li><strong>PyCharm</strong> ：由 JetBrains 公司开发的 Python IDE，拥有丰富的功能和优秀的代码提示功能。</li><li><strong>Jupyter Notebook</strong> ：适用于数据科学和机器学习的交互式开发环境，可以将代码、文档、图表等内容集成在一个界面中。</li></ul><p>下面以常用的 vscode 为例讲一下怎么配置 ide 开发环境。</p><h2 id="vscode-的安装与-python-插件配置" tabindex="-1"><a class="header-anchor" href="#vscode-的安装与-python-插件配置" aria-hidden="true">#</a> VSCode 的安装与 Python 插件配置</h2><h3 id="安装-vscode" tabindex="-1"><a class="header-anchor" href="#安装-vscode" aria-hidden="true">#</a> 安装 VSCode</h3>',7),C=n("strong",null,"下载 VSCode",-1),V=n("br",null,null,-1),E={href:"https://code.visualstudio.com/",target:"_blank",rel:"noopener noreferrer"},I=n("li",null,[n("strong",null,"运行安装程序"),n("br"),o(" 运行下载好的安装程序，按照提示进行安装。")],-1),W=n("li",null,[n("strong",null,"启动 VSCode"),n("br"),o(" 安装完成后，打开 VSCode。")],-1),O=e(`<h3 id="安装-python-插件" tabindex="-1"><a class="header-anchor" href="#安装-python-插件" aria-hidden="true">#</a> 安装 Python 插件</h3><ol><li><strong>打开 Extensions 视图</strong><br> 点击左侧的图标栏中的方块和箭头图标，或者按下<code>Ctrl+Shift+X</code>（Windows）或<code>Cmd+Shift+X</code>（macOS）打开 Extensions 视图。</li><li><strong>搜索并安装 Python 插件</strong><br> 在 Extensions 视图的搜索框中输入<code>Python</code>，会出现一系列与 Python 相关的插件，通常你需要安装以下几个： <ul><li><strong>Python</strong> ：这是 Microsoft 官方提供的 Python 插件，提供了对 Python 的基本支持。</li><li><strong>Python Docstring Generator</strong> ：这个插件可以帮助你快速生成 Python 文档字符串，提高代码的可读性。</li><li><strong>Pylance</strong> ：由 Microsoft 和 Python 社区共同开发的 Python 扩展，提供了先进的代码分析和自动完成功能。</li><li><strong>Python Test Explorer for Visual Studio Code</strong> ：如果你进行单元测试，这个插件可以帮助你在 VSCode 中管理和运行测试。</li></ul></li><li><strong>安装插件</strong><br> 点击相应插件下的安装按钮即可安装。</li></ol><h3 id="配置-python-解释器" tabindex="-1"><a class="header-anchor" href="#配置-python-解释器" aria-hidden="true">#</a> 配置 Python 解释器</h3><ol><li><strong>打开命令面板</strong><br> 使用快捷键<code>Ctrl+Shift+P</code>（Windows）或<code>Cmd+Shift+P</code>（macOS）打开命令面板。</li><li><strong>选择 Python 解释器</strong><br> 输入<code>Python: Select Interpreter</code>，然后选择你想要用于项目的 Python 解释器。<br> 如果你使用了虚拟环境，选择虚拟环境的解释器。</li></ol><h3 id="验证配置" tabindex="-1"><a class="header-anchor" href="#验证配置" aria-hidden="true">#</a> 验证配置</h3><p>创建一个简单的 Python 程序，例如，新建一个名为<code>hello.py</code>的文件，输入以下内容：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, World!&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>右键点击编辑器窗口，选择<code>Run Python File in Terminal</code>，或者按下<code>Ctrl+F5</code>（Windows）或<code>Cmd+F5</code>（macOS）运行程序。如果你看到输出了<code>Hello, World!</code>，那么恭喜你，VSCode 已经成功配置好了 Python 开发环境！</p><h3 id="虚拟环境" tabindex="-1"><a class="header-anchor" href="#虚拟环境" aria-hidden="true">#</a> 虚拟环境</h3><p>到上面这里，开发环境已经搭建好了，按理说就可以愉快的进行开发了。</p><p>但在实际工作中，其实还会有个问题。。。但这个问题对于 0 基础新人来说可以忽略，这里只作为补充知识加入。</p><p>python 开发中，有些功能包需要使用 python3.7，用 python3.6 的话会各种莫名其妙报错。但实际开发中又会需要同时管理多个项目，每个项目依赖的 python 版本或第三方库又很可能并不一致，有些甚至会互相冲突。因此，我们需要有个办法可以同时管理多个开发环境，于是就有了<strong>虚拟环境</strong>。</p><p>虚拟环境是 Python 开发中一个重要的概念，它允许你在同一台机器上的不同项目中使用不同的 Python 环境，避免了依赖冲突问题。</p><p>在命令行中创建一个虚拟环境：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>python <span class="token operator">-</span>m venv myenv  <span class="token comment"># Windows</span>
python3 <span class="token operator">-</span>m venv myenv  <span class="token comment"># macOS</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>此时本地会多一个 myenv 的文件夹。</p><p>创建环境后，还需要激活环境。激活后，你的 shell 中的 python 环境就会切换为新创建的虚拟环境。</p><p>激活虚拟环境：</p><ul><li>在 Windows 系统下：</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>myenv\\Scripts\\activate
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>在 macOS 和 Linux 系统下：</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>source myenv<span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>activate
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,22);function T(X,D){const t=r("ExternalLinkIcon");return l(),i("div",null,[h,c,n("ol",null,[n("li",null,[n("p",null,[p,u,o(" 访问 Python 官方网站（"),n("a",y,[o("https://www.python.org/"),s(t)]),o("），进入官方下载页面。Python 提供了多个版本，通常你可以选择最新的稳定版本进行安装。"),g,_])]),m]),v,n("ol",null,[n("li",null,[n("p",null,[b,P,o(" 访问 Python 官方网站（"),n("a",f,[o("https://www.python.org/"),s(t)]),o("），进入官方下载页面。Python 提供了多个版本，通常你可以选择最新的稳定版本进行安装。"),w,x])]),k]),S,n("ol",null,[n("li",null,[C,V,o(" 访问 Visual Studio Code 官方网站（"),n("a",E,[o("https://code.visualstudio.com/"),s(t)]),o("），下载适合你操作系统的版本。")]),I,W]),O])}const M=a(d,[["render",T],["__file","2. 安装与环境配置.html.vue"]]);export{M as default};
